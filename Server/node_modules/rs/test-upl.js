



function multipart_upload_stream(url, parts, callback) {
    // TODO: better GUID
    var boundary = Math.random().toString().slice(2);

    var meta_len = 0;
    (parts = parts.map(make_part)).forEach(function(part){
        meta_len += part.data.length;
    });

    var headers = {
        'Content-Type': 'multipart/form-data; boundary=' + boundary,
        'Connection': 'close',
        'Content-Length': max_file_size + meta_len
    };

    var opt = URL.parse(url);

    console.log(opt);
    opt.method = 'POST';
    opt.headers = headers;
    var req = http.request(opt, function(res){});

    req.on('response', function(res) {
        callback(null, res);
    });

    // send all the parts
    async.forEachSeries(parts, function(part, callback) {
        // write multipart headers and part body if it was
        // in the part
        req.write(part.data);

        // if it's a streaming part do that.
        if(part.stream) {
            var on_data;

            part.stream.pipe(req, { end: false });
            part.stream.resume();

            part.strea.once('end', function(){
                callback(null);
            });

            part.stream.once('error', function(err){
                callback(err);
            });
        }
    }, function(err) {
        if(err) { callback(err); return; }

        req.end('\r\n--' + boundary + '--');
    });

    // TODO: filename encoding
    function make_part(p){
        var part = '--' + boundary + '\r\n'
            + 'Content-Disposition: form-data; name=' + '"' + p.name + '"'
            + (     p.filename ? ('; filename=' + '"' + p.filename + '"') : '')
            + '\r\n'
            + ( p.type ? ('Content-Type:' + p.type + '\r\n') : '' )
            + '\r\n'
            + ( p.body ? (p.body + '\r\n') : '');

        return {
            data: new Buffer(part)
            , stream: p.stream || null
        }
    }
}

var this.cookie = '81BA7EE05EEE3507608A34B6E7965AA3FC0CE623B2E94B202471CC9BB943104A70B5957211F4071556C6AE2719622142'
var file = {
    name: 'test'
    , content: 'hello world'
}

var filecontent_part = {
    name: 'filecontent'
    , filename: file.name
    , body: file.content || null
    , stream: file.stream || null
};

var parts = [
    { name: 'sub', body: 'upload' },
    { name: 'cookie', body: this.cookie },
    { name: 'folder', body: file.folder || '0' },
    filecontent_part
];

console.log(parts);

this.next_upload_server(function(err, server){
    if(err) { callback(err); return; }

    var url = 'http://' + server + API;
    multipart_upload_stream(url, parts, function(err, res){
        if(err) { callback(err); return; }

        var body = [];

        res.on('data', function(chunk){
            body.push(chunk.toString());
        });

        res.on('end', function(){
            body = body.join('');

            if(body.match(/^ERROR:/)) {
                return callback(new Error(body));
            }

            var lines = body.split('\n');
            var complete = (lines.shift() == 'COMPLETE');

            file = rsaresp(lines.shift(), [ 'id', 'name', 'size' ])[0];

            callback(null, file);
        });
    });
});
