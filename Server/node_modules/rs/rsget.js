#!/usr/bin/env node

var fs = require('fs');
var async = require('async');

var rs = require('./rs');
var utils = require('./utils');

var opt = utils.parse_opts([ 'path', 'ofile']);

var session = rs.createSession();
utils.auth(session, opt.cookie, function(err) {
    if(err) { return console.error(err.stack); }

    session.resolve_path(opt.path, function(err, file) {
        if(err) { return console.error(err.stack); }

        if(file.is_folder)
            throw 'Cannot download folders';

        session.download_json(file, function(err, index){
            if(err) { return console.error(err.stack); }

            if(!(index.name
                 && index.size
                 && index.sha1
                 && Array.isArray(index.parts)))
                throw "Invalid index file";

            var ostream = fs.createWriteStream(opt.ofile);

            async.forEachSeries(index.parts, function(part, callback) {
                session.download_streaming(part, function(err, stream) {
                    if(err) { callback(err); return; }

                    stream.pipe(ostream, { end:false });
                    stream.once('end', function() {
                        callback(null);
                    });

                    stream.once('error', function(err) {
                        callback(err);
                    });
                });
            }, function(err) {
                if(err) { return console.error(err.stack); }

                ostream.end();
                console.log('OK');
            });

        });

    });
});

function usage() {
    console.error(
[ 'Usage: rsdl [--cookie=COOKIEFILE] PATH',
  '',
  '  --help                   Display this help message',
  '  --cookie=COOKIEFILE      File containing the RapidShare API cookie',
  '                           (see rslogin)',
  '',
//  '  --limit=LIMIT            Limit the number of concurrent part downloads'
  '',
  'List files in PATH. PATH must be absolute.'
].join('\n'));
}
