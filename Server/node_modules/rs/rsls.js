#!/usr/bin/env node
/*
 * node-rs: Rapidshare API Implementation
 * Copyright (C) 2012 dxld <dxld Ã„T darkboxed DOT org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var dateformat = require('dateformat');

var rs = require('./rs');
var utils = require('./utils');

var opt = utils.parse_opts([ 'path' ]);

if(opt.help) {
    usage();
    process.exit(0);
}

if(!opt.path) {
    usage();
    console.error('rsls: PATH is required');
    process.exit(0);
}

var session = rs.createSession();
utils.auth(session, opt.cookie, function(err) {
    if(err) { console.error(err.stack); console.error(err); return; }

    session.resolve_folder_path(opt.path, function(err, folder) {
        if(err) { console.error(err.stack); console.error(err); return; }

        session.list_files(folder, function(err, files) {
            if(err) { console.error(err.stack); console.error(err); return; }

            if(opt['files-only']) {
                var entries = files;
            } else {
                var entries
                    = Object.keys(folder.children || {}).map(function(k){
                        return folder.children[k];
                    }).concat(files)
            }

            format_listing(entries);
        });
    });
});

/******************************************************************************
 * UI functions
 */

function format_listing(entries) {
    // console.log(entries)

    if(opt['id-only']) {
        entries.forEach(function(ent){
            console.log((ent.is_folder ? 'd' : '') + ent.id);
        });

        return;
    }

    var column_headings = [ 'id', 'size', 'mtime', 'name'];

    var sizes = column_headings.map(function max_len(col) {
        var max = 0;

        entries.forEach(function(e){
            if(e.is_folder && col == 'size') {
                if(e.children) {
                    e[col] = Object.keys(e.children || {}).length.toString();
                }
            }

            if(e[col]) {
                if(col == 'mtime') {
                    var val = new Number(e[col])
                    e[col] = dateformat(new Date(val), 'mmm d HH:HH');
                }

                max = Math.max(max, e[col].toString().length);
            }
        });

        return max;
    });

    var lines = entries.map(function(ent) {
        return column_headings.map(function(col, i) {
            var val = ent[col];

            if(!val) {
                return str_repeat(' ', sizes[i]);
            } else {
                var len = val.length;

                if(col == 'name') {
                    val = format_name(val, ent.is_folder);
                }

                if(col == 'name' && len < sizes[i]) {
                    return val + str_repeat(' ', sizes[i] - len);
                } else if(len < sizes[i]) {
                    return str_repeat(' ', sizes[i] - len) + val;
                } else {
                    return val;
                }
            }
        }).join(' ');
    }).concat(['']).join('\n');

    process.stdout.write(lines);
}

function str_repeat(s, n) {
    var str = '';
    for(var i=0; i < n; i++) {
        str += s;
    }
    return str;
}

var LS_COLORS;
function format_name(name, is_folder) {
    if(!LS_COLORS) {
        LS_COLORS = {};
        process.env['LS_COLORS']
            .split(':')
            .forEach(function(e){
                e = e.split('=');
                LS_COLORS[e[0]] = e[1];
            });
    }

    var di = LS_COLORS['di'];
    var fi = LS_COLORS['fi'];
    var dircolor = di ? '\033[' + di + 'm' : '';
    var filecolor = fi ? '\033[' + fi + 'm' : '';;

    var rstcolor = '\033[0m';

    if(is_folder) {
        return dircolor + name + rstcolor;
    } else {
        return extcolor(name) + name + rstcolor;
    }

    function extcolor(name) {
        var components = name.split('.');

        var ext = components[1];
        if(LS_COLORS['*.' + ext]) {
            return '\033[' + LS_COLORS['*.' + ext] + 'm';
        } else {
            return filecolor;
        }
    }
}

function usage() {
    console.error(
[ 'Usage: rsls [--cookie=COOKIEFILE] PATH',
  '',
  '  --help                   Display this help message',
  '  --cookie=COOKIEFILE      File containing the RapidShare API cookie',
  '                           (see rslogin)',
  '',
  '  --id-only                Only display ID of entries',
//  '  --dirs-only              Only display directories'
  '  --files-only             Only display files',
  '',
  'List files in PATH. PATH must be absolute.'
].join('\n'));
}
