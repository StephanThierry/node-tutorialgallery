/*
 * node-rs: Rapidshare API Implementation
 * Copyright (C) 2012 dxld <dxld Ã„T darkboxed DOT org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var fs = require('fs');

var filesToDelete = [];

var exitListenerAttached = false;
function attachExitListener() {
    if(exitListenerAttached) return;
    exitListenerAttached = true;

    process.on('exit', function(){
        filesToDelete.forEach(function(file){
            try { fs.unlinkSync(file); }
            catch(e) { /* file already gone */ }
        });
    });
}

exports.tmp_path = function() {
    var tmpfile = '/tmp/rs-'
        + process.pid
        + (Math.random() * 0x100000000 + 1).toString(36);

    filesToDelete.push(tmpfile);
    attachExitListener();

    return tmpfile;
}

exports.parse_opts = function parse_opts(plain_opts) {
    var args = process.argv.slice(2);

    var opts = {};

    var last = '';
    args.forEach(function(arg, i){
        var m;

        if(m = arg.match(/^--([a-zA-Z-]+)=(.+)/)) {   // --text=123
            opts[m[1]] = m[2];
        } else if(m = arg.match(/^--([a-zA-Z-]+)/)) { // --bool
            opts[m[1]] = true;
        } else if (arg.match(/^--/)) {
            console.error(process.argv[0] + ": malformed option '"+ arg +"'");
            process.exit(1);
        } else {
            opts[plain_opts.shift()] = arg;
        }

        last = arg;
    });

    return opts;
}

var auth_env = exports.auth_env = function auth_env() {
    var username, password;

    var auth = process.env.AUTH;
    if(!auth)
        return;

    auth = auth.split(':');
    username = auth[0];
    password = auth[1];

    return [ username, password ];
}

exports.auth = function(session, cookie_file, callback) {
    if(typeof cookie_file == 'function') {
        callback = cookie_file;
        cookie_file = null;
    }

    var credentials;
    if(credentials = auth_env()) {
        session.login(credentials, callback);
    } else if(cookie_file) {
        var cookie = fs.readFileSync(cookie_file);

        var m;
        if(m = cookie.match(/^([a-zA-Z]+)$/)) {
            session.cookie = m[1];
        } else {
            console.error(process.argv[0] + ': Invalid cookie data');
            process.exit(1);
        }

        callback(null);
    } else {
        console.error('You need to be logged in to use the RSApi.');
        process.exit(1);
    }
}
